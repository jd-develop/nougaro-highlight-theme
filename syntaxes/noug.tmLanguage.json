{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "nougaro",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#builtins"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.noug",
                    "match": "\\b(var|del|end|if|then|elif|else|for|while|do|loop|break|continue|def|return|class|import|export|write|read|assert|as)\\b"
                },
                {
                    "name": "keyword.control.less.noug",
                    "match": "\\b(and|or|not|xor|in|to|step)\\b"
                }
            ]
        },
        "builtins": {
            "patterns": [
                {
                    "name": "variable.language.noug",
                    "match": "\\b(this|null|True|False|None|__noug_version__|__python_version__|__exec_from__|__symbol_table__|__os_name__|__os_release__|__os_version__|__base_value__|__disclaimer_of_warranty__|__noug_dir__|__version_id__|__data_version__|answerToTheLifeTheUniverseAndEverything|debug|hello|lorem|math|random|statistics|time|unicodedata|_conffiles|noug_version|__args__|__actual_context__)\\b"
                },
                {
                    "name": "entity.name.function.noug",
                    "match": "\\b(print|print_ret|print_in_red|print_in_red_ret|print_in_green|print_in_green_ret|input|input_int|input_num|type|is_int|is_float|is_num|is_str|is_list|is_func|is_module|is_none|is_constructor|is_object|str|int|float|list|upper|lower|split|startswith|endswith|len|reverse|append|pop|insert|replace|extend|get|max|min|sort|round|ord|chr|__gpl__|__path_exists__|exit|clear|void|run|example|system_call|__python__|__is_keyword__|__is_valid_token_type__|__test__|__py_type__|__how_many_lines_of_code__)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.noug",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.noug",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.noug",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.noug",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.french.noug",
                    "begin": "«",
                    "end": "»",
                    "patterns": [
                        {
                            "name": "constant.character.escape.noug",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.number-sign.noug",
                    "begin": "#",
                    "end": "\n"
                },
                {
                    "include": "#block_comments"
                }
            ]
        },
        "block_comments": {
            "patterns": [
                {
                    "name": "comment.block.noug",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "patterns": [
                        {
                            "include": "#block_comments"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hex.noug",
                    "match": "\\b0(x|X)[0-9a-fA-F]([0-9a-fA-F\\_]*[0-9a-fA-F])?\\b"
                },
                {
                    "name": "constant.numeric.binary.noug",
                    "match": "\\b0(b|B)[01]([01\\_]*[01])?([eE][\\+\\-]?[0-9]([0-9\\_]*[0-9])?)?\\b"
                },
                {
                    "name": "constant.numeric.octal.noug",
                    "match": "\\b0(o|O)[0-7]([0-7\\_]*[0-7])?([eE][\\+\\-]?[0-9]([0-9\\_]*[0-9])?)?\\b"
                },
                {
                    "name": "constant.numeric.noug",
                    "match": "\\b[0-9]([0-9\\_]*[0-9])?(\\.([0-9]([0-9\\_]*[0-9])?)?)?([eE][\\+\\-]?[0-9]([0-9\\_]*[0-9])?)?\\b"
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "name": "variable.noug",
                    "match": "[a-zA-Z\\_](([a-zA-Z\\_0-9])?)*"
                },
                {
                    "name": "variable.default.noug",
                    "match": "<default>"
                }
            ]
        }
    },
    "scopeName": "source.nougaro"
}
